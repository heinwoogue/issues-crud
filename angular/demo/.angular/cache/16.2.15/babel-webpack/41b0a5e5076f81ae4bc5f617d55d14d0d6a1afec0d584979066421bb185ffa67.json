{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { EMPTY } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class IssueService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8082/api/v1/issues';\n  }\n  findById(id) {\n    const url = `http://www.angular.at/api/issue/${id}`;\n    const params = {\n      'id': id\n    };\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    return this.http.get(url, {\n      params,\n      headers\n    });\n  }\n  find() {\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    const params = {};\n    return this.http.get(this.url, {\n      params,\n      headers\n    });\n  }\n  save(issue) {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    if (issue._id) {\n      url = `http://www.angular.at/api/issue/${entity._id.toString()}`;\n      params = new HttpParams().set('ID', entity._id.toString());\n      return this.http.put(url, entity, {\n        headers,\n        params\n      });\n    } else {\n      url = `http://www.angular.at/api/issue`;\n      return this.http.post(url, entity, {\n        headers,\n        params\n      });\n    }\n  }\n  delete(entity) {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    if (entity._id) {\n      url = `http://www.angular.at/api/issue/${entity._id.toString()}`;\n      params = new HttpParams().set('ID', entity._id.toString());\n      return this.http.delete(url, {\n        headers,\n        params\n      });\n    }\n    return EMPTY;\n  }\n  static #_ = this.ɵfac = function IssueService_Factory(t) {\n    return new (t || IssueService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IssueService,\n    factory: IssueService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","EMPTY","IssueService","constructor","http","url","findById","id","params","headers","set","get","find","save","issue","_id","entity","toString","put","post","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["/Users/heinrichwoogue/Desktop/Heinrich/study/issues-crud/angular/demo/src/app/issue/issue.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { Issue } from './issues';\n\n@Injectable()\nexport class IssueService {\n\n  readonly url = 'http://localhost:8082/api/v1/issues'\n\n\n  constructor(private http: HttpClient) {\n  }\n\n  findById(id: string): Observable<Issue> {\n    const url = `http://www.angular.at/api/issue/${id}`;\n    const params = { 'id': id };\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    return this.http.get<Issue>(url, { params, headers });\n  }\n\n  find(): Observable<Issue[]> {\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n\n    const params = {\n    };\n\n    return this.http.get<Issue[]>(this.url, { params, headers });\n  }\n\n  save(issue: Issue): Observable<Issue> {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    if (issue._id) {\n      url = `http://www.angular.at/api/issue/${entity._id.toString()}`;\n      params = new HttpParams().set('ID', entity._id.toString());\n      return this.http.put<Issue>(url, entity, { headers, params });\n    } else {\n      url = `http://www.angular.at/api/issue`;\n      return this.http.post<Issue>(url, entity, { headers, params });\n    }\n  }\n\n  delete(entity: Issue): Observable<Issue> {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    if (entity._id) {\n      url = `http://www.angular.at/api/issue/${entity._id.toString()}`;\n      params = new HttpParams().set('ID', entity._id.toString());\n      return this.http.delete<Issue>(url, { headers, params });\n    }\n    return EMPTY;\n  }\n}\n\n"],"mappings":"AAAA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAE1E,SAASC,KAAK,QAAoB,MAAM;;;AAIxC,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHf,KAAAC,GAAG,GAAG,qCAAqC;EAIpD;EAEAC,QAAQA,CAACC,EAAU;IACjB,MAAMF,GAAG,GAAG,mCAAmCE,EAAE,EAAE;IACnD,MAAMC,MAAM,GAAG;MAAE,IAAI,EAAED;IAAE,CAAE;IAC3B,MAAME,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IACnE,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAQN,GAAG,EAAE;MAAEG,MAAM;MAAEC;IAAO,CAAE,CAAC;EACvD;EAEAG,IAAIA,CAAA;IACF,MAAMH,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IAEnE,MAAMF,MAAM,GAAG,EACd;IAED,OAAO,IAAI,CAACJ,IAAI,CAACO,GAAG,CAAU,IAAI,CAACN,GAAG,EAAE;MAAEG,MAAM;MAAEC;IAAO,CAAE,CAAC;EAC9D;EAEAI,IAAIA,CAACC,KAAY;IACf,IAAIN,MAAM,GAAG,IAAIR,UAAU,EAAE;IAC7B,IAAIK,GAAG,GAAG,EAAE;IACZ,MAAMI,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,IAAII,KAAK,CAACC,GAAG,EAAE;MACbV,GAAG,GAAG,mCAAmCW,MAAM,CAACD,GAAG,CAACE,QAAQ,EAAE,EAAE;MAChET,MAAM,GAAG,IAAIR,UAAU,EAAE,CAACU,GAAG,CAAC,IAAI,EAAEM,MAAM,CAACD,GAAG,CAACE,QAAQ,EAAE,CAAC;MAC1D,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAQb,GAAG,EAAEW,MAAM,EAAE;QAAEP,OAAO;QAAED;MAAM,CAAE,CAAC;KAC9D,MAAM;MACLH,GAAG,GAAG,iCAAiC;MACvC,OAAO,IAAI,CAACD,IAAI,CAACe,IAAI,CAAQd,GAAG,EAAEW,MAAM,EAAE;QAAEP,OAAO;QAAED;MAAM,CAAE,CAAC;;EAElE;EAEAY,MAAMA,CAACJ,MAAa;IAClB,IAAIR,MAAM,GAAG,IAAIR,UAAU,EAAE;IAC7B,IAAIK,GAAG,GAAG,EAAE;IACZ,MAAMI,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,IAAIM,MAAM,CAACD,GAAG,EAAE;MACdV,GAAG,GAAG,mCAAmCW,MAAM,CAACD,GAAG,CAACE,QAAQ,EAAE,EAAE;MAChET,MAAM,GAAG,IAAIR,UAAU,EAAE,CAACU,GAAG,CAAC,IAAI,EAAEM,MAAM,CAACD,GAAG,CAACE,QAAQ,EAAE,CAAC;MAC1D,OAAO,IAAI,CAACb,IAAI,CAACgB,MAAM,CAAQf,GAAG,EAAE;QAAEI,OAAO;QAAED;MAAM,CAAE,CAAC;;IAE1D,OAAOP,KAAK;EACd;EAAC,QAAAoB,CAAA,G;qBAhDUnB,YAAY,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZxB,YAAY;IAAAyB,OAAA,EAAZzB,YAAY,CAAA0B;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}